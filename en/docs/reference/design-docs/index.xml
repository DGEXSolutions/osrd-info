<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OSRD – Design documents</title><link>https://osrd.fr/en/docs/reference/design-docs/</link><description>Recent content in Design documents on OSRD</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://osrd.fr/en/docs/reference/design-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Signaling</title><link>https://osrd.fr/en/docs/reference/design-docs/signaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/signaling/</guid><description>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>The signaling layer includes all signals, which respond to track occupancy and
reservation. Signals can be of different types, and are modularly loaded. Only
their behavior towards the state of the infrastructure and the train&amp;rsquo;s reaction
to signaling matters.&lt;/p>
&lt;p>Signals are connected to each other by blocks. Blocks define paths permitted
by signaling.&lt;/p>
&lt;h2 id="goals">Goals&lt;/h2>
&lt;p>The signaling system is at the crossroads of many needs:&lt;/p>
&lt;ul>
&lt;li>it must allow for realistic signaling simulation in a multi-train simulation&lt;/li>
&lt;li>it must allow the conflict detection system to determine which resources are required for the train&lt;/li>
&lt;li>it must allow application users to edit and display signals&lt;/li>
&lt;li>it must allow for visualization of signals on a map&lt;/li>
&lt;li>it must allow for automated import from existing databases&lt;/li>
&lt;/ul>
&lt;h2 id="design-requirements">Design requirements:&lt;/h2>
&lt;p>All static data:&lt;/p>
&lt;ul>
&lt;li>must enable the front-end to display the signals&lt;/li>
&lt;li>must enable the infrastructure editor to configure signals&lt;/li>
&lt;li>must enable the back-end to simulate signals&lt;/li>
&lt;li>must be close to realistic industry models&lt;/li>
&lt;li>must allow for the modeling of composite signals, which carry several
logical signals within a single physical signal&lt;/li>
&lt;/ul>
&lt;p>To simulate signaling:&lt;/p>
&lt;ul>
&lt;li>blocks must be generated for both user convenience and &lt;strong>pathfinding&lt;/strong>&lt;/li>
&lt;li>for each signal, its &lt;strong>next compatible signal&lt;/strong> and &lt;strong>protected zones&lt;/strong> must be deduced&lt;/li>
&lt;li>the &lt;strong>minimum necessary information&lt;/strong> must be provided to the signaling modules for their operation&lt;/li>
&lt;li>enable using signaling modules without instantiating a complete simulation&lt;/li>
&lt;li>allow for signals to be loaded in any order, in parallel&lt;/li>
&lt;/ul>
&lt;p>For speed limits:&lt;/p>
&lt;ul>
&lt;li>some speed limits have to be enforced depending on the train path&amp;rsquo;s routes&lt;/li>
&lt;li>speed limits can be configured to have an impact on signaling&lt;/li>
&lt;li>ability to link the reaction of the train to a signal, and a speed limit&lt;/li>
&lt;/ul>
&lt;h2 id="assumptions">Assumptions&lt;/h2>
&lt;ul>
&lt;li>Each physical signal can be decomposed into a list of logical signals, all of which are associated with a signaling system.&lt;/li>
&lt;li>Blocks have a type.&lt;/li>
&lt;li>It is possible to compute, given a signal alone, its block and route delimiting properties.&lt;/li>
&lt;li>Blocks never cross route boundaries.&lt;/li>
&lt;li>Blocks which are not covered by routes do not exist, or can be ignored.&lt;/li>
&lt;li>At any time, trains only use one signaling system capable of transmitting movement authority.&lt;/li>
&lt;li>Speed limits change depending on which route is in use, and affect how signals behave&lt;/li>
&lt;li>Some speed limits have an impact on signaling, and some do not&lt;/li>
&lt;li>Either a speed limits differentiates per train category, or requires dynamic signaling, but not both&lt;/li>
&lt;/ul>
&lt;h2 id="operations">Operations&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Instantiating a view&lt;/strong> creates a framework for observing signals&lt;/li>
&lt;li>&lt;strong>Planning the path signals&lt;/strong> to the view the blocks that the train will traverse&lt;/li>
&lt;li>&lt;strong>Observing a signal&lt;/strong> subscribe to the state of a signal (through the view)&lt;/li>
&lt;li>&lt;strong>Passing a signal&lt;/strong> signals that a signal has been passed by the train (through the view)&lt;/li>
&lt;/ul>
&lt;h2 id="research-questions">Research Questions&lt;/h2>
&lt;ul>
&lt;li>Are there any blocks that overlap the end of a route? SNCF(Loïc): No.&lt;/li>
&lt;li>Are there any signals which rely on the state of the one after next signal? SNCF(Loïc): No.&lt;/li>
&lt;li>Are there signals that change behavior based on the active block in front of them? SNCF(Loïc): Yes, for slowdowns.&lt;/li>
&lt;li>Are there signals that are the start of blocks of different types? SNCF(Loïc): Yes.&lt;/li>
&lt;li>Can the behavior of a signal depend on which block is active after the end of the current block? SNCF(Loïc): Yes, with slowdowns or blinking yellow.&lt;/li>
&lt;li>Do some signaling systems need additional information in the blocks? SNCF(Loïc): Kind of, there are slowdowns, but it&amp;rsquo;s not specifically carried by the block.&lt;/li>
&lt;li>Is it nominal for a train to have multiple active signaling systems at the same time? SNCF(Loïc): No.&lt;/li>
&lt;li>are there any signals which depend on which route is set, but are not route delimiters? SNCF(Loïc): Yes, see Sémaphore Clignotant&lt;/li>
&lt;li>how do speed limits per train category and dynamic signaling interact? SNCF(Nicolas): There shouldn&amp;rsquo;t be any speed limit per category signaled by dynamic signaling&lt;/li>
&lt;li>are there any signals which depend on the state of multiple routes? SNCF(Loïc): No&lt;/li>
&lt;/ul></description></item><item><title>Docs: Conflict detection</title><link>https://osrd.fr/en/docs/reference/design-docs/conflict-detection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/conflict-detection/</guid><description>
&lt;div class="pageinfo pageinfo-warning">
&lt;p>This document is a work in progress&lt;/p>
&lt;/div>
&lt;p>Conflict detection is the process of looking for timetable conflicts.
A timetable conflict is any predictable condition which disrupts planned operations.
Planned operations can be disrupted if a train is slowed down, prevented from proceeding, or delayed.&lt;/p>
&lt;p>One of the core features of OSRD is the ability to automatically detect some conflicts:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>spacing conflicts&lt;/strong>: insufficient spacing between trains sharing the same path&lt;/li>
&lt;li>&lt;strong>routing conflicts&lt;/strong>: insufficient spacing between trains with intersecting paths&lt;/li>
&lt;/ul>
&lt;p>Some other kinds of conflicts may be detected &lt;em>later on&lt;/em>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>maintenance conflicts&lt;/strong>: planned maintenance disrupts the path of a train&lt;/li>
&lt;li>&lt;strong>power delivery conflicts&lt;/strong>: combined power delivery requirements exceeds capacity&lt;/li>
&lt;/ul>
&lt;p>Conflict detection relies on interlocking and signaling modeling and simulation to:&lt;/p>
&lt;ol>
&lt;li>figure out what each actor requires to perform its duty undisturbed&lt;/li>
&lt;li>detect conflicting requirements&lt;/li>
&lt;/ol>
&lt;h2 id="design-constraints">Design constraints&lt;/h2>
&lt;p>The primary design goals are as follows:&lt;/p>
&lt;ul>
&lt;li>enable threading new train paths into an existing timetable (see STDCM)&lt;/li>
&lt;li>produce conflicts which can be linked back to a root cause&lt;/li>
&lt;li>operate in way that can be visualized and interpreted&lt;/li>
&lt;li>scale to real world timetables: millions of yearly trains, tens of thousands of daily trains&lt;/li>
&lt;/ul>
&lt;p>In addition to these goals, the following constraints apply:&lt;/p>
&lt;ul>
&lt;li>it must be possible to thread new train paths into timetables with existing conflicts&lt;/li>
&lt;li>it must not cause false-negatives: if no conflicts are detected, a multi-train simulation of the same timetable must not yield any slowdowns&lt;/li>
&lt;li>it cannot rely on data we do not have&lt;/li>
&lt;li>it has to enable later support of mobile block systems&lt;/li>
&lt;li>it has to rely on existing signaling and interlocking simulation&lt;/li>
&lt;li>it has to enable detecting conflicts regardless of the signaling system in use&lt;/li>
&lt;li>it has to support transitions between signaling systems&lt;/li>
&lt;li>it has to support conflicts between different signaling systems&lt;/li>
&lt;/ul>
&lt;h2 id="conflict-modeling">Conflict modeling&lt;/h2>
&lt;p>&lt;strong>Actors&lt;/strong> are objects which cause resources to be used:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>train paths&lt;/strong> (or someone / something on the behalf of the train)&lt;/li>
&lt;li>&lt;strong>maintenance work&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Actors need &lt;strong>resources&lt;/strong> to be available to proceed, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>zones&lt;/strong>, which have one state per way to traverse it&lt;/li>
&lt;li>&lt;strong>switches&lt;/strong>, which have one state per position&lt;/li>
&lt;li>&lt;strong>station platforms&lt;/strong>, which could be used to prevent two large trains from occupying both sides of a tiny platform&lt;/li>
&lt;/ul>
&lt;p>Actor emit &lt;strong>resource requirements&lt;/strong>, which:&lt;/p>
&lt;ul>
&lt;li>describe the need of an actor for a resource, for a given time span&lt;/li>
&lt;li>describe what the resource is needed for&lt;/li>
&lt;li>detail how the resource is used, such as switch position, zone entry and exit&lt;/li>
&lt;/ul>
&lt;p>Resource requirements can turn out to be either &lt;strong>satisfied&lt;/strong>
or &lt;strong>conflicting&lt;/strong> with other requirements, depending on compatibility rules.&lt;/p>
&lt;p>&lt;strong>Compatibility rules differ by requirement purpose and resource type&lt;/strong>. For example:&lt;/p>
&lt;ul>
&lt;li>spacing requirements are exclusive: simultaneous requirements for the same resource are conflicting&lt;/li>
&lt;li>zone and switch requirements are shareable: simultaneous requirements are satisfied if the resource configuration is identical&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>For conflict detection to work, resource requirements have to be at least as extensive as what&amp;rsquo;s required to guarantee that a train path will not be disturbed.&lt;/strong>&lt;/p>
&lt;h2 id="routing-conflicts">Routing conflicts&lt;/h2>
&lt;h3 id="context">Context&lt;/h3>
&lt;p>For trains to proceed safely along their planned path:&lt;/p>
&lt;ul>
&lt;li>switches have to be moved in the appropriate position&lt;/li>
&lt;li>level crossings have to activate&lt;/li>
&lt;li>risks of collision with other trains have to be mitigated&lt;/li>
&lt;/ul>
&lt;p>In practice, the path of trains is partitioned into routes, which when set, ensure a train can safely follow the route.&lt;/p>
&lt;p>Routes have the following lifestyle:&lt;/p>
&lt;ul>
&lt;li>As a train approaches the start of one of its routes, it is &lt;strong>called&lt;/strong> by an operator. If all resources required to safely use the route are available, switches and level crossings start to move. If a resources is not available, e.g. because another train has reserved a section of track, this process is delayed until all conditions are met.&lt;/li>
&lt;li>Once all resources are configured and reserved, the route is &lt;strong>set&lt;/strong> and ready to be followed. Before that point, the entry of the route was protected by signaling, which prevented the train from moving past the entry point.&lt;/li>
&lt;li>As the train moves along the route, it is &lt;strong>destroyed&lt;/strong>. When the tail of the trail releases key detectors along the route, resources before this detector are released, and can this be reserved by other routes.&lt;/li>
&lt;/ul>
&lt;p>For a train to proceed through a route unimpeded, the following things have to happen:&lt;/p>
&lt;ul>
&lt;li>The route has to be set before the train arrives, and before it is slowed down by signaling.&lt;/li>
&lt;li>The route has to be called, so that is it set in time.&lt;/li>
&lt;li>All resources required for the route to start setting at call time have to be available.&lt;/li>
&lt;/ul>
&lt;h3 id="generating-requirements">Generating requirements&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">RouteRequirement&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">route&lt;/span>: &lt;span style="color:#000">RouteId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">set_deadline&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">zone_requirements&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">RouteZoneRequirement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">RouteZoneRequirement&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">zone&lt;/span>: &lt;span style="color:#000">ZoneId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">entry_det&lt;/span>: &lt;span style="color:#000">DirDetectorId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">exit_det&lt;/span>: &lt;span style="color:#000">DirDetectorId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">release_time&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">switches&lt;/span>: &lt;span style="color:#000">Map&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">SwitchId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">SwitchConfigId&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Routing requirements are generated by the following algorithm:&lt;/p>
&lt;ul>
&lt;li>Compute the set deadline using signaling simulation. The set deadline is the point in time at which the train would be slowed down if the route were not set.&lt;/li>
&lt;li>For each zone in each route, simulate when it would be released, and thus not required anymore.&lt;/li>
&lt;/ul>
&lt;div class="pageinfo pageinfo-info">
&lt;p>Route overlaps are not yet supported.&lt;/p>
&lt;/div>
&lt;h3 id="requirement-compatibility-rules">Requirement compatibility rules&lt;/h3>
&lt;p>Requirement compatibility is evaluated for all &lt;code>RouteZoneRequirement&lt;/code>s, grouped by zone. Requirements A and B, ordered such that &lt;code>A.set_deadline &amp;lt;= B.set_deadline&lt;/code>, are compatible if and only if either:&lt;/p>
&lt;ul>
&lt;li>their active time span does not overlap, such that &lt;code>A.release_time &amp;lt;= (B.set_deadline - activation_time)&lt;/code>, where the activation time is the delay required to reconfigure from &lt;code>A.switches&lt;/code> to &lt;code>B.switches&lt;/code>.&lt;/li>
&lt;li>&lt;code>(A.entry_det, A.exit_det, A.switches) == (B.entry_det, B.exit_det, B.switches)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="spacing-conflicts">Spacing conflicts&lt;/h2>
&lt;h3 id="context-1">Context&lt;/h3>
&lt;p>Even if interlocking mitigates some of the risks associated with operating trains, a major one is left out: head to tail collisions, caused by insufficient spacing.&lt;/p>
&lt;p>This responsibility is handled by signaling, which conveys both interlocking and spacing constraints.&lt;/p>
&lt;p>Signaling helps trains slow down until the end of their movement authority, which is either:&lt;/p>
&lt;ul>
&lt;li>behind the tail of the next train&lt;/li>
&lt;li>at the end of the last route set for this train&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Spacing requirements are emitted for zones which if occupied, would cause a slowdown, and zones occupied by the train&lt;/strong>&lt;/p>
&lt;h3 id="generating-requirements-1">Generating requirements&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">SpacingRequirement&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">zone&lt;/span>: &lt;span style="color:#000">ZoneId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">begin_time&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">end_time&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Every time the driver sees a signal, generate updated spacing requirements by calculating which zones, if occupied, would trigger a slowdown:&lt;/p>
&lt;ul>
&lt;li>start by assuming the zone just after the head of the train is occupied&lt;/li>
&lt;li>until the train is not slowed down, move the occupied section one zone further away from the train&lt;/li>
&lt;/ul>
&lt;h3 id="requirement-compatibility-rules-1">Requirement compatibility rules&lt;/h3>
&lt;p>Requirement compatibility is evaluated for all &lt;code>SpacingRequirement&lt;/code>s, grouped by zone.&lt;/p>
&lt;p>Requirements A and B are compatible if and only if their &lt;code>[begin_time, end_time]&lt;/code> ranges do not overlap.&lt;/p>
&lt;h2 id="incremental-requirement-generation">Incremental requirement generation&lt;/h2>
&lt;h3 id="routing-requirements">Routing requirements&lt;/h3>
&lt;pre class="mermaid">sequenceDiagram
participant client as Client
participant gen as Routing resource generator
client -&amp;gt;&amp;gt; gen: initial path &amp;#43; train movement
loop
gen -&amp;gt;&amp;gt; client: prefix path extension needed
client -&amp;gt;&amp;gt; gen: extra prefix path &amp;#43; train movement
end
gen -&amp;gt;&amp;gt; client: resource requirements&lt;/pre>
&lt;p>After an initial path is given, the requirement generator can ask for more &lt;strong>prefix&lt;/strong> path (before the start of the route). The client responds with:&lt;/p>
&lt;ul>
&lt;li>the extra prefix path&lt;/li>
&lt;li>the movement of the train over time on the given prefix path&lt;/li>
&lt;/ul>
&lt;p>If the initial path has multiple routes, the last route is the one resource requirements are emitted for.&lt;/p>
&lt;h3 id="spacing-requirements">Spacing requirements&lt;/h3>
&lt;pre class="mermaid">sequenceDiagram
participant client as Client
participant gen as Spacing resource generator
client -&amp;gt;&amp;gt; gen: initial path &amp;#43; train movement
loop
gen -&amp;gt;&amp;gt; client: postfix path extension needed
client -&amp;gt;&amp;gt; gen: extra postfix path
end
gen -&amp;gt;&amp;gt; client: resource requirements&lt;/pre>
&lt;p>After an initial path is given, the requirement generator can ask for more &lt;strong>postfix&lt;/strong> path (before the start of the route).&lt;/p>
&lt;h2 id="visualizing-requirements">Visualizing requirements&lt;/h2>
&lt;script type="application/javascript" src="mkt.js">&lt;/script>
&lt;p>&lt;object style="width: 100%" onload="mkt_hydrate(this.contentDocument.rootElement)" type="image/svg+xml" data="requirements-diagram.svg">&lt;/object>&lt;/p>
&lt;p>&lt;a href="./requirements-diagram.html">Full-page requirements diagram&lt;/a>&lt;/p></description></item><item><title>Docs: Search for last-minute train slots (STDCM)</title><link>https://osrd.fr/en/docs/reference/design-docs/stdcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/stdcm/</guid><description>
&lt;p>OSRD can be used to find a slot for a train in an already established
timetable, without causing conflicts with other trains.&lt;/p>
&lt;p>The acronym STDCM (Short Term Digital Capacity Management) is used
to describe this concept in general.&lt;/p></description></item><item><title>Docs: Timetable v2</title><link>https://osrd.fr/en/docs/reference/design-docs/timetable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/timetable/</guid><description>
&lt;p>&lt;img src="timetable.svg" alt="Test">&lt;/p>
&lt;h2 id="design-decisions">Design decisions&lt;/h2>
&lt;p>Some major changes were made between our first version of the timetable and the new one:&lt;/p>
&lt;ul>
&lt;li>Isolate the timetable table. It can be used in a scenario or in other contexts&lt;/li>
&lt;li>Have a soft reference from train schedule to rolling stock (to be able to create a train schedule with unknown rolling stock)&lt;/li>
&lt;li>Consider path and simulation output as cache (that don&amp;rsquo;t require to be stored in DB)&lt;/li>
&lt;li>We can compute pathfinding without having to store data&lt;/li>
&lt;li>All input needed to compute a path is stored in the train schedule (we can recompute it if needed)&lt;/li>
&lt;li>All input needed to run a simulation is stored in the train schedule (we can recompute it if needed)&lt;/li>
&lt;/ul>
&lt;h1 id="train-schedule-v2">Train schedule v2&lt;/h1>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>&lt;code>front&lt;/code>: easy to keep consistent during edition&lt;/li>
&lt;li>&lt;code>front&lt;/code>: intermediate invalid states than can be reached during edition have to be encodable&lt;/li>
&lt;li>&lt;code>front&lt;/code>: when deleting a waypoint that is referenced by margins, the position of the deleted waypoint within the path must be preserved until the situation is resolved&lt;/li>
&lt;li>&lt;code>import&lt;/code>: path waypoint locations can be specified using UIC operational point codes&lt;/li>
&lt;li>&lt;code>import&lt;/code>: support fixed scheduled arrival times at stops and arbitrary points&lt;/li>
&lt;li>&lt;code>import&lt;/code> &lt;code>edition&lt;/code>: train schedules must be self-contained: they cannot be described using the result of pathfinding or simulations&lt;/li>
&lt;/ul>
&lt;h2 id="design-decisions-1">Design decisions&lt;/h2>
&lt;h3 id="path-waypoints-have-an-identity">Path waypoints have an identity&lt;/h3>
&lt;p>At some point in the design process, the question was raised of whether to reference location of stops and margin transitions by name, or by value. That is, should stops hold the index of the waypoint where the stop occurs, or a description of the location where the stop occurs?&lt;/p>
&lt;p>It was decided to add identifiers to path waypoints, and to reference those identifiers where referencing a path location is needed. This has multiple upsides:&lt;/p>
&lt;ul>
&lt;li>you can&amp;rsquo;t reference a location outside of the path&lt;/li>
&lt;li>when changing a waypoint&amp;rsquo;s location, for example from one station&amp;rsquo;s platform to another, no additional maintenant work is needed to keep the path consistent&lt;/li>
&lt;li>if a path goes to the same place multiple times, the identifier reference makes it clear which path location is referenced&lt;/li>
&lt;li>it makes keeping data consistent while editing easier, as all locations are kept in a single place&lt;/li>
&lt;/ul>
&lt;h3 id="invalid-train-schedules-and-soft-deletes">Invalid train schedules and soft deletes&lt;/h3>
&lt;p>If an user deletes a waypoint, what happens? Is it the front-end&amp;rsquo;s responsibility to only save valid schedules, or can invalid schedules be represented in the data model? We decided that it wasn&amp;rsquo;t just the front-end&amp;rsquo;s responsibility, as we want to be able to model inconsistent states, until the user comes back to fix it.&lt;/p>
&lt;p>One key observation was that don&amp;rsquo;t want to loose the ability to locate within the path waypoints that were deleted, until all references are gone. How is the front-end supposed to display margin bounds or stops for a waypoint that&amp;rsquo;s gone, if it&amp;rsquo;s not there anymore?&lt;/p>
&lt;p>We thus decided to add a &lt;code>deleted&lt;/code> soft-delete flag to waypoints. When this flag is set, the back-end run simulations on the path, but still allows saving it. Once all references to a deleted waypoint are gone, it can be removed from the path. The backend can deny train schedules with stale deleted waypoints.&lt;/p>
&lt;h3 id="separating-path-and-stops">Separating path and stops&lt;/h3>
&lt;p>This decision was hard to make, as there are little factors influencing this decision. Two observations led us to this decision:&lt;/p>
&lt;ul>
&lt;li>when deleting a waypoint, the end user may want to preserve the associated stop. Making the separation clear in the data model helps with implementing this behavior correctly, if deemed relevant&lt;/li>
&lt;li>bundling stops into the path makes it harder to describe what fields &lt;code>path&lt;/code> waypoints should have, and what should have a separate object and reference. It was decided that keeping &lt;code>path&lt;/code> a simple list of &lt;code>Location&lt;/code>, with no strings attached, made things a little clearer.&lt;/li>
&lt;/ul>
&lt;h3 id="no-more-engineering-margins">No more engineering margins?&lt;/h3>
&lt;p>In the legacy model, we had engineering margins. These margins had the property of being able to overlap. It was also possible to choose the distribution algorithm for each margin individually.&lt;/p>
&lt;p>We asked users to comment on the difference and the usefulness of retaining these margins with scheduled points. The answer is that there is no fundamental difference, and that the additional flexibility offered by engineering margins makes no pratical sense (overlap and choice of distribution&amp;hellip;).&lt;/p>
&lt;h3 id="arrival-times-are-durations-since-departure-time">Arrival times are durations since departure time&lt;/h3>
&lt;ul>
&lt;li>this allows shifting the departure time without having to change arrival times&lt;/li>
&lt;li>we don&amp;rsquo;t have to parse dates and compute date differences within a single trip&lt;/li>
&lt;/ul>
&lt;p>We also discussed whether to use seconds or ISO 8601 durations. In the end, ISO 8601 was choosen, despite the simplicity of seconds:&lt;/p>
&lt;ul>
&lt;li>it preserves the user&amp;rsquo;s choice unit for specifying duration&lt;/li>
&lt;li>it interfaces nicely with the ISO 8601 departure time&lt;/li>
&lt;li>it does not suffer from potential integer-float serialization related precision loss&lt;/li>
&lt;/ul>
&lt;h3 id="invalid-and-outdated-train-schedules">Invalid and outdated train schedules&lt;/h3>
&lt;p>Reasons for a train schedule to be &lt;strong>invalid&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Inconsitent train schedule (contains deleted waypoint)&lt;/li>
&lt;li>Rolling stock not found&lt;/li>
&lt;li>Path waypoint not found&lt;/li>
&lt;li>The path cannot be found&lt;/li>
&lt;/ul>
&lt;p>Reasons for a train schedule to be &lt;strong>outdated&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The train path changed&lt;/li>
&lt;li>The train running time changed&lt;/li>
&lt;/ul>
&lt;p>What we can do about outdated trains:&lt;/p>
&lt;ol>
&lt;li>Nothing, they&amp;rsquo;re updated without notification&lt;/li>
&lt;li>We can notify the user that a train schedule is outdated:
&lt;ul>
&lt;li>Nothing can be done except acknoledge the change&lt;/li>
&lt;li>We can not check what changed between the old and new version&lt;/li>
&lt;li>We can not know the cause of this change (RS, Infra, Algorithms&amp;hellip;)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Note: The outdated status is a nice to have feature (it won&amp;rsquo;t be implemented right now).&lt;/p>
&lt;h2 id="creation-fields">Creation fields&lt;/h2>
&lt;p>These fields are required at creation time, but cannot be changed afterwards.
They are returned when the train schedule is queried.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">timetable_id&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="modifiable-fields">Modifiable fields&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">train_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ABC3615&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">rolling_stock_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">R2D2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># labels are metadata. They&amp;#39;re only used for display filtering&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;tchou-tchou&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;choo-choo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># used to select speed limits for simulation&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">speed_limit_tag&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;MA100&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the start time is an ISO 8601 datetime with timezone. it is not always the&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># same at the departure time, as there may be a stop at the starting point&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">start_time&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2023-12-21T08:51:11.914897+00:00&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: a, uic&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">87210&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Any operational point matching the given uic&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: b, track: foo, offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 10m on track foo&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: c, deleted: true, trigram&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ABC}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Any operational point matching the trigram ABC&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: d, operational_point&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">X}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># A specified operational point&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the algorithm used for distributing margins and scheduled times&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constraint_distribution&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">MARECO&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># or LINEAR&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># all durations and times are specified using ISO 8601&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># we don&amp;#39;t supports months and years duration since it&amp;#39;s ambiguous&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># times are defined as time elapsed since start. Even if the attribute is omitted,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># a scheduled point at the starting point is infered to have departure=start_time&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the &amp;#34;locked&amp;#34; flag is ignored by the backend.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># To force stop-signal on stop&amp;#39;s arrival, you can use the &amp;#34;on_stop_signal&amp;#34; flag.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">schedule&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: a, stop_for: PT5M, locked&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># infered arrival to be equal to start_time&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: b, arrival: PT10M, stop_for&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PT5M}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: c, stop_for&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PT5M}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: d, arrival: PT50M, locked: true, on_stop_signal&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">margins&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># This example encodes the following margins:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># a --- 5% --- b --- 3% --- d&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># /!\ all schedule points with either an arrival or departure time must also be&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># margin boundaries. departure and arrival waypoints are implicit boundaries. /!\&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># boundaries delimit margin sections. A list of N boundaries yields N + 1 sections.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">boundaries&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">b]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the following units are supported:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - none is a special value which indicates no margin. It&amp;#39;s the default&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - % means added percentage of the base simulation time&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - min/km means minutes per kilometers&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">values&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;5%&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;3%&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># train speed at simulation start, in meters per second.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># must be zero if the train starts at a stop&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">initial_speed&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.5&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">power_restrictions&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">from: b, to: c, value&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;M1C1&amp;#34;&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">comfort&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AIR_CONDITIONING&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># or HEATING, default STANDARD&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">options&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Should we use electrical profiles to select rolling stock speed effort curves&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">use_electrical_profiles&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="combining-margins-and-schedule">Combining margins and schedule&lt;/h1>
&lt;p>Margins and scheduled points are two ways to add time constraints to a train&amp;rsquo;s schedule.
Therefore, there most be a clear set of rules to figure out how these two interfaces interact.&lt;/p>
&lt;p>The end goal is to make the target schedule and margins consistent with each other. This is achieved by:&lt;/p>
&lt;ul>
&lt;li>computing what the schedule would look like if only margins were applied&lt;/li>
&lt;li>compare that to the target schedule&lt;/li>
&lt;li>correct the margin schedule so that it matches the target schedule&lt;/li>
&lt;/ul>
&lt;p>The path is partitionned as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>known time sections&lt;/strong> span between locations where the arrival time is known.
If there are &lt;code>N&lt;/code> such locations, there are &lt;code>N - 1&lt;/code> known time sections.
In these sections, margins need to be adjusted to match the target schedule.&lt;/li>
&lt;li>If the arrival time at destination is unknown, the section from the last known
arrival time point and the destination is called the &lt;strong>relaxed time section&lt;/strong> has no bound.
Margins can be applied directly.&lt;/li>
&lt;/ul>
&lt;p>As &lt;strong>margins cannot span known time section boundaries&lt;/strong>, each known time section can be
further subdivided into margin sections. Margins cover the entire path.&lt;/p>
&lt;p>&lt;strong>The end goal is to find the target arrival time at the end of each margin section&lt;/strong>.
This needs to be done while preserving consistency with the input schedule.&lt;/p>
&lt;p>&lt;img src="schedule.svg" alt="Schedule building algorithm">&lt;/p>
&lt;p>The final schedule is computed as follows:&lt;/p>
&lt;ul>
&lt;li>A &lt;strong>base simulation&lt;/strong> is computed, without any time constraint (other than stops). It&amp;rsquo;s used to compute provisional margin values.&lt;/li>
&lt;li>Make a &lt;strong>provisional time table&lt;/strong>, which ignores target arrival times but includes provisional margin values.&lt;/li>
&lt;li>For each &lt;strong>known time section&lt;/strong>, compute the adjustment required to make the provisional schedule match the target schedule.&lt;/li>
&lt;li>Distribute this difference into the known time section&amp;rsquo;s margin sections, proportionally to margin section running time.
After distributing the adjustment into margin sections, the &lt;strong>final schedule&lt;/strong> should be compatible with the target schedule.&lt;/li>
&lt;/ul>
&lt;h2 id="error-handling">Error handling&lt;/h2>
&lt;p>Some errors may happen while building the timetable:&lt;/p>
&lt;ul>
&lt;li>if a known time section&amp;rsquo;s required adjustment is negative, a warning must be raised, as margins will have to be lowered&lt;/li>
&lt;li>if a margin section&amp;rsquo;s final running time is tighter than the base simulation, it cannot be achieved, and a warning should be raised&lt;/li>
&lt;/ul>
&lt;p>Other errors can happen at runtime:&lt;/p>
&lt;ul>
&lt;li>target margin values can be too low, as transitions from high density margin to low margin section force the train to loose
time after it has exited to high density margin section.&lt;/li>
&lt;li>target margin values can also be too high, as the train may not have time to slow down enough, or drive so slow as to be
unacceptable.&lt;/li>
&lt;/ul>
&lt;p>During simulation, &lt;strong>if a target arrival time cannot be achieved, the rest of the schedule still stands&lt;/strong>.&lt;/p>
&lt;h2 id="endpoints">Endpoints&lt;/h2>
&lt;h3 id="timetable">Timetable&lt;/h3>
&lt;pre tabindex="0">&lt;code>POST /v2/timetable
GET /v2/timetable/ # Paginated list timetable
PUT /v2/timetable/ID
DELETE /v2/timetable/ID
GET /v2/timetable/ID # Timetable with list of train schedule ids attached to it
&lt;/code>&lt;/pre>&lt;h3 id="train-schedule">Train Schedule&lt;/h3>
&lt;pre tabindex="0">&lt;code>POST /v2/timetable/ID/train_schedule # A batch creation
GET /v2/train_schedule/ID
PUT /v2/train_schedule/ID # Update a specific train schedule
DELETE /v2/train_schedule # A batch deletion
&lt;/code>&lt;/pre>&lt;h3 id="path">Path&lt;/h3>
&lt;pre tabindex="0">&lt;code>POST /v2/infra/ID/pathfinding/topo # Not required now can be move later
POST /v2/infra/ID/pathfinding/blocks
# takes a pathfinding result and a list of properties to extract
POST /v2/infra/ID/path_properties?props[]=slopes&amp;amp;props[]=gradients&amp;amp;props[]=electrifications&amp;amp;props[]=geometry&amp;amp;props[]=operational_points
GET /v2/train_schedule/ID/path?infra_id=42 # Retrieve the path from a train schedule
&lt;/code>&lt;/pre>&lt;h3 id="simulation-results">Simulation results&lt;/h3>
&lt;pre tabindex="0">&lt;code># Retrieve the list of conflict of the timetable (invalid trains are ignored)
GET /v2/timetable/ID/conflicts?infra=N
# Retrieve the space, speed and time curve of a given train
GET /v2/train_schedule/ID/simulation?infa=N
# Retrieves simulation information for a given train list. Useful for finding out whether pathfinding/simulation was successful.
GET /v2/train_schedule/simulations_sumary?infa=N&amp;amp;ids[]=X&amp;amp;ids[]=Y
# Projects the space time curves and paths of a number of train schedules onto a given path
POST /v2/train_schedule/project_path?infra=N&amp;amp;ids[]=X&amp;amp;ids[]=Y
&lt;/code>&lt;/pre></description></item></channel></rss>