<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OSRD – Explanations</title><link>https://osrd.fr/en/docs/explanation/</link><description>Recent content in Explanations on OSRD</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://osrd.fr/en/docs/explanation/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Containers architecture</title><link>https://osrd.fr/en/docs/explanation/containers-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/containers-architecture/</guid><description>
&lt;p>There are 3 main containers deployed in a standard OSRD setup:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Gateway&lt;/strong> &lt;em>(includes the frontend)&lt;/em>: Serves the front end, handles authentication and proxies requests to the backend.&lt;/li>
&lt;li>&lt;strong>Editoast&lt;/strong>: Acts as the backend that interacts with the front end.&lt;/li>
&lt;li>&lt;strong>Core&lt;/strong>: Handles computation and business logic, called by Editoast.&lt;/li>
&lt;/ul>
&lt;h2 id="standard-deployment">Standard deployment&lt;/h2>
&lt;p>The standard deployment can be represented with the following diagram.&lt;/p>
&lt;pre class="mermaid">flowchart TD
gw[&amp;#34;gateway&amp;#34;]
front[&amp;#34;front-end static files&amp;#34;]
gw -- local file --&amp;gt; front
browser --&amp;gt; gw
gw -- HTTP --&amp;gt; editoast
editoast -- HTTP --&amp;gt; core&lt;/pre>
&lt;p>External requests are received by the gateway. If the path asked starts with &lt;code>/api&lt;/code> it will be forwarded using HTTP to editoast, otherwise it will serve a file with the asked path. Editoast reach the core using HTTP if required.&lt;/p>
&lt;p>The gateway is not only a reverse proxy with the front-end bundle included, it also provides all the authentication mechanisms: using OIDC or tokens.&lt;/p></description></item><item><title>Docs: Models</title><link>https://osrd.fr/en/docs/explanation/models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/models/</guid><description/></item><item><title>Docs: Running time calculation</title><link>https://osrd.fr/en/docs/explanation/running_time_calculation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/running_time_calculation/</guid><description>
&lt;p>OSRD can be used to perform two types of calculations:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Standalone train simulation:&lt;/strong> calculation of the travel time of a train on a given route without interaction between the train and the signalling system.&lt;/li>
&lt;li>&lt;strong>Simulation:&lt;/strong> &amp;ldquo;dynamic&amp;rdquo; calculation of several trains interacting with each other via the signalling system.&lt;/li>
&lt;/ul>
&lt;h4 id="1---the-input-data">1 - The input data&lt;/h4>
&lt;p>A running time calculation is based on 5 inputs:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Infrastructure:&lt;/strong> Line and track topology, position of stations and passenger buildings, position and type of points, signals, maximum line speeds, corrected line profile (gradients, ramps and curves).&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="infrastructure.png" alt="Infrastructure">&lt;/p>
&lt;blockquote>
&lt;p>The blue histogram is a representation of the gradients in [‰] per position in [m]. The gradients are positive for ramps and negative for slopes.&lt;/p>
&lt;p>The orange line represents the cumulative profile, i.e. the relative altitude to the starting point.&lt;/p>
&lt;p>The blue line is a representation of turns in terms of radii of curves in [m].&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>The rolling stock:&lt;/strong> The characteristics of which needed to perform the simulation are shown below.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="mat_roulant.png" alt="Rolling Stock Material">&lt;/p>
&lt;blockquote>
&lt;p>The orange curve, called the effort-speed curve, represents the maximum motor effort as a function of the speed of travel.&lt;/p>
&lt;p>The length, mass, and maximum speed of the train are shown at the bottom of the box.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>The departure time&lt;/strong> is then used to calculate the times of passage at the various points of interest (including stations).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Allowances:&lt;/strong> Time added to the train&amp;rsquo;s journey to relax its running (see &lt;a href="./allowances">page on allowances&lt;/a>).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="marges.png" alt="Allowances">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>The time step&lt;/strong> for the calculation of &lt;a href="./numerical_integration">numerical integration&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h4 id="2---the-results">2 - The results&lt;/h4>
&lt;p>The results of a running time calculation can be represented in different forms:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>The space/time graph (GET):&lt;/strong> represents the path of trains in space and time, in the form of generally diagonal lines whose slope is the speed. Stops are shown as horizontal plates.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="graph_espace_temps.jpg" alt="Space/Time Graph">&lt;/p>
&lt;blockquote>
&lt;p>Example of a GET with several trains spaced about 30 minutes apart.&lt;/p>
&lt;p>The &lt;strong>x&lt;/strong> axis is the time of the train, the &lt;strong>y&lt;/strong> axis is the position of the train in [m].&lt;/p>
&lt;p>The blue line represents the most tense running calculation for the train, the green line represents a relaxed, so-called &amp;ldquo;economic&amp;rdquo; running calculation.&lt;/p>
&lt;p>The solid rectangles surrounding the paths represent the portions of the track successively reserved for the train to pass (called blocks).&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>The space/speed graph (SSG):&lt;/strong> represents the journey of a single train, this time in terms of speed. Stops are therefore shown as a drop in the curve to zero, followed by a re-acceleration.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="graph_espace_vitesse.png" alt="Space/Speed Graph">&lt;/p>
&lt;blockquote>
&lt;p>The &lt;strong>x&lt;/strong> axis is the train position in [m], the &lt;strong>y&lt;/strong> axis is the train speed in [km/h].&lt;/p>
&lt;p>The purple line represents the maximum permitted speed.&lt;/p>
&lt;p>The blue line represents the speed in the case of the most stretched running calculation.&lt;/p>
&lt;p>The green line represents the speed in the case of the &amp;ldquo;economic&amp;rdquo; travel calculation.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>The timetable for the passage of the train at the various points of interest&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="timetables.png?style=time" alt="Departure timetables">&lt;/p>
&lt;style>
img[src$="time"] {
height: 70%;
width: 70%;
}
&lt;/style></description></item><item><title>Docs: Netzgrafik-Editor</title><link>https://osrd.fr/en/docs/explanation/netzgrafik-editor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/netzgrafik-editor/</guid><description>
&lt;p>Netzgrafik-Editor (NGE) is an open-source software that enables the creation, modification, and analysis of regular-interval timetable, at a macroscopic level of detail, developed by &lt;a href="https://www.sbb.ch/">Swiss Federal Railways (SBB CFF FFS)&lt;/a>. See &lt;a href="https://github.com/SchweizerischeBundesbahnen/netzgrafik-editor-frontend">front-end&lt;/a> and &lt;a href="https://github.com/SchweizerischeBundesbahnen/netzgrafik-editor-backend">back-end&lt;/a> repositories.&lt;/p>
&lt;p>OSRD (microscopic level of detail, trains scheduled once, based on a defined infrastructure, depicts a timetable) and NGE (macroscopic level of detail, regular-interval based train runs, no infrastructure, depicts a transportation plan) are semantically different, but close enough to make it work together.
The compatibility between NGE and OSRD has been tested through a proof of concept, by running both pieces of software as separate services and without automated synchronization.&lt;/p>
&lt;p>The idea is to give to OSRD a graphical tool to edit (create, update and delete train schedules from) a timetable from an operational study scenario, and get some insights on analytics at the same time. The second benefit of using both microscopic and macroscopic level of detail is that OSRD microscopic calculations can be propagated in NGE to enhance the level of detail of it.&lt;/p>
&lt;p>The transversal objective of this feature is to make 2 open-source projects from 2 big infrastructure managers work along and cooperate with one another with the same goals.&lt;/p>
&lt;h4 id="1---integration-in-osrd">1 - Integration in OSRD&lt;/h4>
&lt;p>Therefore, NGE is integrated in the operational studies section of OSRD, in an &lt;a href="https://developer.mozilla.org/fr/docs/Web/HTML/Element/iframe">&lt;code>iframe&lt;/code>&lt;/a>. An alternative way to deal with the integration would have been to refactor NGE as &lt;a href="https://developer.mozilla.org/fr/docs/Web/API/Web_components">&lt;code>web-components&lt;/code>&lt;/a>, thus easy to import in OSRD, but this solution has been abandoned, because of the quantity of refactoring that would have been needed. This &lt;code>iframe&lt;/code> points to &lt;code>osrd-nge&lt;/code>, a minimalist Angular app that embed the actual NGE app. It can also be seen as a wrapper of the actual NGE app. &lt;code>osrd-nge&lt;/code> then customizes the actual NGE app with specific parameters and functionalities:&lt;/p>
&lt;ul>
&lt;li>a &lt;code>standalone&lt;/code> flag:
&lt;ul>
&lt;li>to tell NGE to disable all back-end interactions (no database on NGE side)&lt;/li>
&lt;li>to tell NGE to disable some UI components (authentication, project management, versioning system view, etc.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>implementation of a communication interface between OSRD and NGE (&lt;a href="https://developer.mozilla.org/fr/docs/Web/API/Window/message_event">&lt;code>message_event&lt;/code>&lt;/a>, &lt;a href="https://developer.mozilla.org/fr/docs/Web/API/EventTarget/addEventListener">&lt;code>eventListener&lt;/code>&lt;/a> and &lt;a href="https://developer.mozilla.org/fr/docs/Web/API/Window/postMessage">&lt;code>postMessage&lt;/code>&lt;/a>).&lt;/li>
&lt;/ul>
&lt;p>NGE is then able to get the OSRD timetable as soon as a change is made on OSRD side, and OSRD is able to get the changes made on NGE side.&lt;/p>
&lt;p>The following diagram shows the workflow between the components.&lt;/p>
&lt;p>&lt;img src="osrd_nge_concept_diagram.jpg" alt="Concept diagram">&lt;/p>
&lt;pre class="mermaid">---
title: OSRD - NGE Sequence diagram
---
sequenceDiagram
autonumber
OSRD (parent window)--&amp;gt;&amp;gt;OSRD (parent window): init web page
OSRD (parent window)-&amp;gt;&amp;gt;NGE (osrd-nge iframe): iframe.contentWindow.postMessage(nge_light_model, &amp;#34;*&amp;#34;)
loop while synchronization is ON
alt any modification in OSRD (parent window)
OSRD (parent window)--&amp;gt;&amp;gt;OSRD (parent window): any modification
OSRD (parent window)-&amp;gt;&amp;gt;NGE (osrd-nge iframe): iframe.contentWindow.postMessage(nge_light_model, &amp;#34;*&amp;#34;)
else any modification in NGE (osrd-nge iframe)
NGE (osrd-nge iframe)--&amp;gt;&amp;gt;NGE (osrd-nge iframe): any modification &amp;lt;br&amp;gt;(hooks)
NGE (osrd-nge iframe)-&amp;gt;&amp;gt;OSRD (parent window): parent.window.postMessage(nge_action, &amp;#34;*&amp;#34;)
OSRD (parent window)--&amp;gt;&amp;gt;OSRD (parent window): convert NGE action into &amp;lt;br/&amp;gt;timetable update
OSRD (parent window)-&amp;gt;&amp;gt;NGE (osrd-nge iframe): iframe.contentWindow.postMessage(nge_light_model, &amp;#34;*&amp;#34;)
end
end&lt;/pre>
&lt;p>Since OSRD is the only source of truth (= data source), NGE has to be updated as the very last action, to be aligned with the timetable current state, and to get the updated microscopic calculations from OSRD.&lt;/p>
&lt;p>More precisely, when a change is made in NGE:&lt;/p>
&lt;pre class="mermaid">---
title: OSRD - NGE Communication when modification in NGE
---
sequenceDiagram
autonumber
NGE (nge-app)--&amp;gt;NGE (osrd-nge): osrd-nge listens on hooks &amp;lt;br&amp;gt;from nge-app
NGE (osrd-nge)-&amp;gt;&amp;gt;NGE (osrd-nge): (eventListeners) &amp;lt;br&amp;gt; callback triggered
NGE (osrd-nge)-&amp;gt;&amp;gt;OSRD (front-end): (callback functions) &amp;lt;br&amp;gt;parent.window.postMessage(nge_action, &amp;#34;*&amp;#34;)
OSRD (front-end)-&amp;gt;&amp;gt;OSRD (front-end): (eventListeners) &amp;lt;br&amp;gt; convert nge_action &amp;lt;br&amp;gt; into timetable update
OSRD (front-end)-&amp;gt;&amp;gt;OSRD (back-end): call for update timetable
OSRD (back-end)-&amp;gt;&amp;gt;OSRD (front-end): update timetable
OSRD (front-end)-&amp;gt;&amp;gt; OSRD (front-end): convert timetable into &amp;lt;br&amp;gt; nge_light_model
OSRD (front-end)-&amp;gt;&amp;gt;NGE (osrd-nge): iframe.contentWindow.postMessage(nge_light_model, &amp;#34;*&amp;#34;)
NGE (osrd-nge)-&amp;gt;&amp;gt;NGE (osrd-nge): (eventListener) &amp;lt;br&amp;gt; onLoad triggered
NGE (osrd-nge)-&amp;gt;&amp;gt;NGE (nge-app): (callback function) &amp;lt;br&amp;gt; onLoad(nge_light_model, ...)&lt;/pre>
&lt;h4 id="2---converters">2 - Converters&lt;/h4>
&lt;p>To overpass the semantic differences and make the data models fit, 2 converters have to be implemented:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>[OSRD -&amp;gt; NGE]&lt;/strong> a converter that transforms an OSRD timetable into an NGE model&lt;/li>
&lt;li>&lt;strong>[OSRD &amp;lt;- NGE]&lt;/strong> an event handler, that transforms NGE action into OSRD database update on timetable&lt;/li>
&lt;/ul>
&lt;h4 id="3---open-source-cooperation--contribution">3 - Open-source (cooperation / contribution)&lt;/h4>
&lt;p>To make NGE compatible with OSRD, some changes have been requested (disable back-end, create hooks on events) and directly implemented in the &lt;a href="https://github.com/SchweizerischeBundesbahnen/netzgrafik-editor-frontend">official repository of NGE&lt;/a>, with the agreement and help of NGE team.&lt;/p>
&lt;p>Contributions for one project to another, from both sides, are valuable and will be entertained in the future.&lt;/p>
&lt;p>This feature also shows that open-source cooperation is powerful and a huge gain of time in software development.&lt;/p></description></item></channel></rss>