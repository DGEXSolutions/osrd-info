<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OSRD â€“ Deploy OSRD</title><link>https://osrd.fr/en/docs/guides/deploy/</link><description>Recent content in Deploy OSRD on OSRD</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://osrd.fr/en/docs/guides/deploy/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Docker Compose</title><link>https://osrd.fr/en/docs/guides/deploy/docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/deploy/docker-compose/</guid><description>
&lt;p>The OSRD project includes a &lt;code>docker-compose.yml&lt;/code> file designed to facilitate the deployment of a fully functional OSRD environment.
Only intended for development purposes, this Docker Compose configuration could be adapted for quick, single-node deployments.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Disclaimer&lt;/h4>
This setup is designed for development only.
For example no authentication is supported and the front-end is served in development mode (rebuilt on the fly).
If you mean to deploy a production ready version of OSRD, please follow the &lt;a href="../kubernetes/">Kubernetes-based deployment&lt;/a>
&lt;/div>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Before proceeding with the deployment, ensure that you have the following installed:&lt;/p>
&lt;ul>
&lt;li>Docker&lt;/li>
&lt;li>Docker Compose&lt;/li>
&lt;/ul>
&lt;h2 id="configuration-overview">Configuration Overview&lt;/h2>
&lt;p>The &lt;code>docker-compose.yml&lt;/code> file defines the following services:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>PostgreSQL&lt;/strong>: A PostgreSQL database with PostGIS extension.&lt;/li>
&lt;li>&lt;strong>Valkey&lt;/strong>: A Valkey server for caching.&lt;/li>
&lt;li>&lt;strong>Core&lt;/strong>: The core OSRD service.&lt;/li>
&lt;li>&lt;strong>Front&lt;/strong>: The front-end service for OSRD.&lt;/li>
&lt;li>&lt;strong>Editoast&lt;/strong>: A OSRD service responsible for various editorial functions.&lt;/li>
&lt;li>&lt;strong>Gateway&lt;/strong>: Serves as the gateway for the OSRD services.&lt;/li>
&lt;li>&lt;strong>Wait-Healthy&lt;/strong>: A utility service to ensure all services are healthy before proceeding.&lt;/li>
&lt;/ol>
&lt;p>Each service is configured with health checks, volume mounts and necessary environment variables.&lt;/p>
&lt;h2 id="deployment-steps">Deployment Steps&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Clone the Repository&lt;/strong>: First, clone the OSRD repository to your local machine.&lt;/li>
&lt;li>&lt;strong>Configuration&lt;/strong>: The default configuration requires setting an environment variable for the Editoast service: &lt;code>ROOT_URL&lt;/code>.
It should be set to the URL pointing to the Editoast service through the gateway. For example, &amp;ldquo;&lt;a href="http://your-domain.com/api%22">http://your-domain.com/api&amp;quot;&lt;/a>.
You can also adjust other environment variables if needed.&lt;/li>
&lt;li>&lt;strong>Build and Run&lt;/strong>: Navigate to the directory containing &lt;code>docker-compose.yml&lt;/code> and run:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker-compose up --build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command builds the images and starts the services defined in the Docker Compose file.&lt;/p>
&lt;h2 id="accessing-services">Accessing Services&lt;/h2>
&lt;p>While all HTTP service are used through the gateway (&lt;code>http://localhost:4000&lt;/code>), you can access directly each service using their exposed ports:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>PostgreSQL&lt;/strong>: Accessible on &lt;code>localhost:5432&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Valkey&lt;/strong>: Accessible on &lt;code>localhost:6379&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Core Service&lt;/strong>: Accessible on &lt;code>localhost:8080&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Front-End&lt;/strong>: Accessible on &lt;code>localhost:3000&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Editoast&lt;/strong>: Accessible on &lt;code>localhost:8090&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="notes-and-considerations">Notes and Considerations&lt;/h2>
&lt;ul>
&lt;li>This setup is designed for development and quick deployments. For production environments, additional considerations for security, scalability and reliability should be addressed.&lt;/li>
&lt;li>Ensure that the &lt;code>POSTGRES_PASSWORD&lt;/code> and other sensitive credentials are securely managed, especially in production deployments.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Kubernetes with Helm</title><link>https://osrd.fr/en/docs/guides/deploy/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/deploy/kubernetes/</guid><description>
&lt;p>The OSRD project&amp;rsquo;s Helm Chart provides a flexible and efficient way to deploy OSRD services in a Kubernetes environment. This document outlines the configuration options available in the Helm Chart, focusing on each service component.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Before proceeding with the deployment, ensure that you have the following installed:&lt;/p>
&lt;ul>
&lt;li>A Kubernetes cluster up and running&lt;/li>
&lt;li>A PostgreSQL database with PostGIS&lt;/li>
&lt;li>A Valkey server (used for caching)&lt;/li>
&lt;/ul>
&lt;h2 id="stateful-editoast">Stateful editoast&lt;/h2>
&lt;p>Editoast is a service that is &lt;strong>almost&lt;/strong> capable of horizontal scaling (stateless). However, part of the application requires consistent RAM storage and therefore doesn&amp;rsquo;t support scaling. This small part is called &lt;strong>stateful editoast&lt;/strong>.&lt;/p>
&lt;p>The Helm Chart deploys two OSRD services:&lt;/p>
&lt;ul>
&lt;li>The first one &lt;code>editoast&lt;/code> (stateless) which uses a &lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/">Horizontal Pod Autoscaler (hpa)&lt;/a>.&lt;/li>
&lt;li>The second one &lt;code>stateful-editoast&lt;/code> which has a single replica to ensure data consistency in RAM.&lt;/li>
&lt;/ul>
&lt;p>You can view the recommended deployment here:&lt;/p>
&lt;pre class="mermaid">flowchart TD
gw[&amp;#34;gateway&amp;#34;]
front[&amp;#34;front-end static files&amp;#34;]
gw -- local file --&amp;gt; front
browser --&amp;gt; gw
gw -- HTTP --&amp;gt; stateful-editoast
gw -- HTTP --&amp;gt; editoast-1
gw -- HTTP --&amp;gt; editoast-2
gw -- HTTP --&amp;gt; editoast-N
stateful-editoast -- AMQP --&amp;gt; RabbitMQ
editoast-1 -- AMQP --&amp;gt; RabbitMQ
editoast-2 -- AMQP --&amp;gt; RabbitMQ
editoast-N -- AMQP --&amp;gt; RabbitMQ
RabbitMQ -- AMQP --&amp;gt; Core-X
Osrdyne -- HTTP/AMQP --&amp;gt; RabbitMQ
Osrdyne -- Control --&amp;gt; Core-X&lt;/pre>
&lt;h2 id="chart-values-overview">Chart Values Overview&lt;/h2>
&lt;p>The Helm Chart is configurable through the following values:&lt;/p>
&lt;h3 id="editoast">Editoast&lt;/h3>
&lt;ul>
&lt;li>&lt;code>editoast&lt;/code>: Configuration for the Editoast service.
&lt;ul>
&lt;li>&lt;code>init&lt;/code>: Initialization configuration.&lt;/li>
&lt;li>&lt;code>replicaCount&lt;/code>: Number of replicas, enabling horizontal scaling.&lt;/li>
&lt;li>&lt;code>hpa&lt;/code>: Horizontal Pod Autoscaler configuration.&lt;/li>
&lt;li>Other standard Kubernetes deployment options.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="stateful-editoast-1">Stateful Editoast&lt;/h3>
&lt;ul>
&lt;li>&lt;code>stateful-editoast&lt;/code>: Specialized Editoast service for &lt;code>/infra/{infra_id}&lt;/code> requests
&lt;ul>
&lt;li>&lt;code>image&lt;/code>: Docker image to use (usually the same as Editoast).&lt;/li>
&lt;li>Other standard Kubernetes deployment options.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="osrdyne">Osrdyne&lt;/h3>
&lt;ul>
&lt;li>&lt;code>osrdyne&lt;/code>: Osrdyne service that controls the cores.
&lt;ul>
&lt;li>&lt;code>image&lt;/code>: Docker image to use.&lt;/li>
&lt;li>&lt;code>amqp&lt;/code>: RabbitMQ connection&lt;/li>
&lt;li>Other standard Kubernetes deployment options.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="gateway">Gateway&lt;/h3>
&lt;ul>
&lt;li>&lt;code>gateway&lt;/code>: Configuration for the OSRD gateway.
&lt;ul>
&lt;li>Includes service, ingress, and other Kubernetes deployment options.&lt;/li>
&lt;li>&lt;code>config&lt;/code>: Specific configurations for authentication and trusted proxies.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="deployment">Deployment&lt;/h2>
&lt;p>The chart is available at ghcr OCI repository. You can find 2 Helm charts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/OpenRailAssociation/osrd-chart/pkgs/container/charts%2Fosrd">Stable charts&lt;/a>: &lt;code>oci://ghcr.io/OpenRailAssociation/charts/osrd&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/OpenRailAssociation/osrd-chart/pkgs/container/charts%2Fosrd-dev">Dev charts&lt;/a>: &lt;code>oci://ghcr.io/OpenRailAssociation/charts/osrd-dev&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>To deploy the OSRD services using this Helm Chart:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Configure Values&lt;/strong>: Adjust the values in the Helm Chart to suit your deployment needs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Install Chart&lt;/strong>: Use Helm to install the chart into your Kubernetes cluster.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>helm install osrd oci://ghcr.io/OpenRailAssociation/charts/osrd -f values.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Docs: STDCM search environment configuration</title><link>https://osrd.fr/en/docs/guides/deploy/stdcm-search-env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/deploy/stdcm-search-env/</guid><description>
&lt;p>In order for the STDCM tool to function, you&amp;rsquo;ll need to setup the STDCM Search Environment, a configuration stored in database.&lt;/p>
&lt;p>The configurable fields are as such:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">StdcmSearchEnvironment&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">infra_id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">electrical_profile_set_id&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">work_schedule_group_id&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">timetable_id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">search_window_begin&lt;/span>: &lt;span style="color:#000">NaiveDateTime&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">search_window_end&lt;/span>: &lt;span style="color:#000">NaiveDateTime&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This configuration is queried by the frontend.
That way, the right objects and time bounds are used transparently by the user.&lt;/p>
&lt;p>In order to setup this config, you can either&lt;/p>
&lt;ul>
&lt;li>Use the provided REST API (see &lt;a href="https://osrd.fr/en/docs/reference/apis/editoast/#operations-tag-stdcm_search_environment">the editoast openAPI&lt;/a>
in the stdcm_search_environment section)&lt;/li>
&lt;li>Use the provided editoast cli (run &lt;code>editoast stdcm-search-env help&lt;/code> for more information)&lt;/li>
&lt;/ul></description></item></channel></rss>